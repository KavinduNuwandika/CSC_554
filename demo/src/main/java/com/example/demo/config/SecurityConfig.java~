package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                // Publicly accessible pages
                .dispatcherTypeMatchers("/login", "/register").permitAll()

                // Role-based access control
                .dispatcherTypeMatchers(HttpMethod.valueOf("/admin/**")).hasRole("ADMIN") // Only Admins can access /admin/**
                .dispatcherTypeMatchers(HttpMethod.valueOf("/teacher/**")).hasAnyRole("ADMIN", "TEACHER") // Teachers and Admins
                .dispatcherTypeMatchers("/student/**").hasAnyRole("ADMIN", "STUDENT") // Students and Admins

                // Any other request requires authentication
                .anyRequest().authenticated()
                .and()
                .formLogin()
                .loginPage("/login") // Custom login page
                .defaultSuccessUrl("/dashboard", true) // Redirect to dashboard after login
                .permitAll()
                .and()
                .logout()
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .permitAll()
                .and()
                .csrf().disable(); // Disable CSRF for simplicity (not recommended for production)
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        // Use in-memory authentication for simplicity
        auth.inMemoryAuthentication()
                .withUser("admin").password(passwordEncoder().encode("admin123")).roles("ADMIN")
                .and()
                .withUser("teacher").password(passwordEncoder().encode("teacher123")).roles("TEACHER")
                .and()
                .withUser("student").password(passwordEncoder().encode("student123")).roles("STUDENT");
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // Password encoder to hash passwords
    }
}
